syntax = "proto3";

package plugin;

option go_package = "github.com/harith2001/Coconut-Peat-Supply-chain_core_system/proto;proto";

// Main service, which acts as an API Gateway.
service MainService {
  // Function called by the client.
  rpc ClientFunction(ClientRequest) returns (ClientResponse);
}

service NewPluginService{
rpc NewPluginCreate(NewPluginCreateRequest) returns (NewPluginCreateResponse);
}


message ClientRequest {
  string plugin_name = 1;
  string workflow_id = 2;
  string userRequirement = 3;
  string action = 4;
}
 
message ClientResponse {
    bool success = 1;
  string message = 2;
  map<string, string> results = 3;
}

message NewPluginCreateRequest {
  string fileName = 1;
  bytes fileData = 2;
}

message NewPluginCreateResponse {
  bool success = 1;
  string message = 2;
}


// Plugin service, which acts as a plugin.
service Plugin {
  rpc RegisterPlugin (PluginRequest) returns (PluginResponse);
  rpc ExecutePlugin (PluginExecute) returns (ExecutionStatus);
  rpc UnregisterPlugin (PluginUnregister) returns (UnregisterResponse);
}

message PluginRequest {
  string plugin_name = 1;
  string workflow_id = 2;
  string userRequirement = 3;
}

message PluginResponse {
  bool success = 1;
  string message = 2;
}

message PluginExecute{
  string plugin_name = 1;
  string workflow_id = 2;
}

message ExecutionStatus {
  bool success = 1;
  string message = 2;
  map<string,string> results =3;
}

message PluginUnregister{
  string plugin_name = 1;
  string workflow_id = 2;
}

message UnregisterResponse{
  bool success = 1;
  string message = 2;
}